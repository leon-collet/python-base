# 4. * (вместо 3) Решить задачу 3 для ситуации, когда объём данных в файлах превышает объём ОЗУ
# (разумеется, не нужно реально создавать такие большие файлы, это просто задел на будущее проекта).
# Также реализовать парсинг данных из файлов - получить отдельно фамилию, имя и отчество для пользователей
# и название каждого хобби: преобразовать в какой-нибудь контейнерный тип (список, кортеж, множество, словарь).
# Обосновать выбор типа. Подумать, какие могут возникнуть проблемы при парсинге.
# В словаре должны храниться данные, полученные в результате парсинга.

import json

users_hobby = {}
write_line = {}

with open('users.csv', encoding='utf-8') as u, \
        open('hobby.csv', encoding='utf-8') as h, \
        open('users_hobby_6_4.json', 'a', encoding='utf-8') as uh:
    for user in u:
        hobby = h.readline().strip().split(",") if h.readline() != '' else None
        users_hobby[tuple(user.strip().split(","))] = hobby
        write_line[user.strip()] = hobby
    uh.write(json.dumps(write_line))

print(type(users_hobby), users_hobby, sep='\n')

check_dict = {}

with open('users_hobby_6_4.json', 'r', encoding='utf-8') as uh:
    check = json.loads(uh.read())
    for people in check:
        check_dict[tuple(people.strip().split(","))] = check[people]

print(type(check_dict), check_dict, sep='\n')

# Второй вариант решения в task_6_4_2.py и оно более логичное.
# Не могу точно интерпретировать условия задачи, по этому у меня существует два словаря с итогами работы парсера:
# users_hobby - хранит все значения по итогу разбора файлов в правильном представлении. Ключи - кортежи ФИО, выбран такой формат,
# так как можно отдельно выдернуть фамилию или имя, а список не может быть ключём. Значения - список, так как он не поменяется при
# сохранении в json.
# write_line - словарь для записи, ключи - строки. Я не смог придумать как без потерь хранить ключи-кортежи в json. При чтении они становятся списками
# и происходит ошибка, итоговый словарь не получается создать.  По этому при каждом открытии прочтённый словарь перебирается и становится нужным.
